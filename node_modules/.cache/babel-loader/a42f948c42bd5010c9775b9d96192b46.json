{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/appReact/todolist/src/component/Todo.js\";\nimport React, { memo, useState } from 'react';\nconst Todo = memo(props => {\n  const {\n    todo,\n    getTodoEditingId,\n    todoEditingId\n  } = props;\n  const [text, setText] = useState(todo.text);\n  const isEditing = todoEditingId === todo.id;\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: `${isEditing ? \"editing\" : \"\"} ${todo.isCompleted ? 'completed' : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, !isEditing ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"toggle\",\n    type: \"checkbox\",\n    checked: todo.isCompleted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 22\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    onDoubleClick: () => getTodoEditingId(todo.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 22\n    }\n  }, todo.text), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"destroy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 22\n    }\n  })) : /*#__PURE__*/React.createElement(\"input\", {\n    className: \"edit\",\n    type: \"text\",\n    value: text,\n    checked: todo.isCompleted,\n    onChange: e => setText(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }));\n});\nexport default Todo;","map":{"version":3,"sources":["/Users/admin/Desktop/appReact/todolist/src/component/Todo.js"],"names":["React","memo","useState","Todo","props","todo","getTodoEditingId","todoEditingId","text","setText","isEditing","id","isCompleted","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,MAAMC,IAAI,GAAGF,IAAI,CAACG,KAAK,IAAI;AACvB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,gBAAR;AAA0BC,IAAAA;AAA1B,MAA4CH,KAAlD;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACG,IAAI,CAACG,IAAN,CAAhC;AACA,QAAME,SAAS,GAAGH,aAAa,KAAIF,IAAI,CAACM,EAAxC;AACA,sBACI;AAAI,IAAA,SAAS,EAAG,GAAED,SAAS,GAAG,SAAH,GAAc,EAAG,IAAGL,IAAI,CAACO,WAAL,GAAmB,WAAnB,GAAiC,EAAG,EAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACF,SAAD,gBACG;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACK;AAAO,IAAA,SAAS,EAAC,QAAjB;AAA2B,IAAA,IAAI,EAAC,UAAhC;AAA2C,IAAA,OAAO,EAAEL,IAAI,CAACO,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,eAEK;AAAO,IAAA,aAAa,EAAI,MAAMN,gBAAgB,CAACD,IAAI,CAACM,EAAN,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0DN,IAAI,CAACG,IAA/D,CAFL,eAGK;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHL,CADH,gBAMG;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,KAAK,EAAEA,IAHX;AAII,IAAA,OAAO,EAAEH,IAAI,CAACO,WAJlB;AAKI,IAAA,QAAQ,EAAEC,CAAC,IAAIJ,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPR,CADJ;AAkBH,CAtBgB,CAAjB;AAwBA,eAAeZ,IAAf","sourcesContent":["import React, { memo, useState } from 'react'\n\nconst Todo = memo(props => {\n    const { todo, getTodoEditingId, todoEditingId } = props\n    const [text, setText] = useState(todo.text)\n    const isEditing = todoEditingId ===todo.id\n    return(\n        <li className={`${isEditing ? \"editing\": \"\"} ${todo.isCompleted ? 'completed' : \"\"}`}>\n            {!isEditing ?\n                <div className=\"view\">\n                     <input className=\"toggle\"  type=\"checkbox\" checked={todo.isCompleted}/>\n                     <label onDoubleClick = {() => getTodoEditingId(todo.id)}>{todo.text}</label>\n                     <button class=\"destroy\"></button> \n                </div> :\n                <input \n                    className=\"edit\"  \n                    type=\"text\" \n                    value={text}\n                    checked={todo.isCompleted}\n                    onChange={e => setText(e.target.value)}\n                 />\n              }\n        </li>\n    )\n})\n\nexport default Todo"]},"metadata":{},"sourceType":"module"}